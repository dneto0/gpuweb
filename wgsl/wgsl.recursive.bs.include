<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>access_mode</dfn>:

 | `'read'`

 | `'read_write'`

 | `'write'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>additive_operator</dfn>:

 | [=syntax/minus=]

 | [=syntax/plus=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>address_space</dfn>:

 | `'function'`

 | `'private'`

 | `'storage'`

 | `'uniform'`

 | `'workgroup'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>attribute</dfn>:

 | [=syntax/attr=] `'align'` [=syntax/paren_left=] [=right_syntax/expression=] [=syntax/comma=] ? [=syntax/paren_right=]

 | [=syntax/attr=] `'binding'` [=syntax/paren_left=] [=right_syntax/expression=] [=syntax/comma=] ? [=syntax/paren_right=]

 | [=syntax/attr=] `'builtin'` [=syntax/paren_left=] [=right_syntax/builtin_value_name=] [=syntax/comma=] ? [=syntax/paren_right=]

 | [=syntax/attr=] `'compute'`

 | [=syntax/attr=] `'const'`

 | [=syntax/attr=] `'fragment'`

 | [=syntax/attr=] `'group'` [=syntax/paren_left=] [=right_syntax/expression=] [=syntax/comma=] ? [=syntax/paren_right=]

 | [=syntax/attr=] `'id'` [=syntax/paren_left=] [=right_syntax/expression=] [=syntax/comma=] ? [=syntax/paren_right=]

 | [=syntax/attr=] `'interpolate'` [=syntax/paren_left=] [=right_syntax/interpolation_type_name=] [=syntax/comma=] ? [=syntax/paren_right=]

 | [=syntax/attr=] `'interpolate'` [=syntax/paren_left=] [=right_syntax/interpolation_type_name=] [=syntax/comma=] [=right_syntax/interpolation_sample_name=] [=syntax/comma=] ? [=syntax/paren_right=]

 | [=syntax/attr=] `'invariant'`

 | [=syntax/attr=] `'location'` [=syntax/paren_left=] [=right_syntax/expression=] [=syntax/comma=] ? [=syntax/paren_right=]

 | [=syntax/attr=] `'size'` [=syntax/paren_left=] [=right_syntax/expression=] [=syntax/comma=] ? [=syntax/paren_right=]

 | [=syntax/attr=] `'vertex'`

 | [=syntax/attr=] `'workgroup_size'` [=syntax/paren_left=] [=right_syntax/expression=] [=syntax/comma=] ? [=syntax/paren_right=]

 | [=syntax/attr=] `'workgroup_size'` [=syntax/paren_left=] [=right_syntax/expression=] [=syntax/comma=] [=right_syntax/expression=] [=syntax/comma=] ? [=syntax/paren_right=]

 | [=syntax/attr=] `'workgroup_size'` [=syntax/paren_left=] [=right_syntax/expression=] [=syntax/comma=] [=right_syntax/expression=] [=syntax/comma=] [=right_syntax/expression=] [=syntax/comma=] ? [=syntax/paren_right=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>bitwise_expression.post.unary_expression</dfn>:

 | [=syntax/and=] [=right_syntax/unary_expression=] ( [=syntax/and=] [=right_syntax/unary_expression=] )*

 | [=syntax/or=] [=right_syntax/unary_expression=] ( [=syntax/or=] [=right_syntax/unary_expression=] )*

 | [=syntax/xor=] [=right_syntax/unary_expression=] ( [=syntax/xor=] [=right_syntax/unary_expression=] )*
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>bool_literal</dfn>:

 | `'false'`

 | `'true'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>builtin_value_name</dfn>:

 | `'frag_depth'`

 | `'front_facing'`

 | `'global_invocation_id'`

 | `'instance_index'`

 | `'local_invocation_id'`

 | `'local_invocation_index'`

 | `'num_workgroups'`

 | `'position'`

 | `'sample_index'`

 | `'sample_mask'`

 | `'vertex_index'`

 | `'workgroup_id'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>callable</dfn>:

 | [=right_syntax/ident=]

 | [=right_syntax/mat_prefix=]

 | [=right_syntax/type_decl_without_ident=]

 | [=right_syntax/vec_prefix=]

 | `'array'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>case_selector</dfn>:

 | [=right_syntax/expression=]

 | `'default'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>compound_assignment_operator</dfn>:

 | [=syntax/and_equal=]

 | [=syntax/division_equal=]

 | [=syntax/minus_equal=]

 | [=syntax/modulo_equal=]

 | [=syntax/or_equal=]

 | [=syntax/plus_equal=]

 | [=syntax/shift_left_equal=]

 | [=syntax/shift_right_equal=]

 | [=syntax/times_equal=]

 | [=syntax/xor_equal=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>compound_statement</dfn>:

 | [=syntax/brace_left=] [=right_syntax/statement=] * [=syntax/brace_right=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>const_literal</dfn>:

 | [=right_syntax/bool_literal=]

 | [=right_syntax/float_literal=]

 | [=right_syntax/int_literal=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>core_lhs_expression</dfn>:

 | [=right_syntax/ident=]

 | [=syntax/paren_left=] [=right_syntax/lhs_expression=] [=syntax/paren_right=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>decimal_float_literal</dfn>:

 | `/0[fh]/`

 | `/[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/`

 | `/[0-9]+[eE][+-]?[0-9]+[fh]?/`

 | `/[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/`

 | `/[1-9][0-9]*[fh]/`
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>depth_texture_type</dfn>:

 | `'texture_depth_2d'`

 | `'texture_depth_2d_array'`

 | `'texture_depth_cube'`

 | `'texture_depth_cube_array'`

 | `'texture_depth_multisampled_2d'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>element_count_expression</dfn>:

 | [=right_syntax/unary_expression=] ( [=right_syntax/multiplicative_operator=] [=right_syntax/unary_expression=] )* ( [=right_syntax/additive_operator=] [=right_syntax/multiplicative_expression=] )*

 | [=right_syntax/unary_expression=] [=right_syntax/bitwise_expression.post.unary_expression=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>expression</dfn>:

 | [=right_syntax/unary_expression=] [=right_syntax/bitwise_expression.post.unary_expression=]

 | [=right_syntax/unary_expression=] [=right_syntax/relational_expression.post.unary_expression=]

 | [=right_syntax/unary_expression=] [=right_syntax/relational_expression.post.unary_expression=] [=syntax/and_and=] [=right_syntax/relational_expression=] ( [=syntax/and_and=] [=right_syntax/relational_expression=] )*

 | [=right_syntax/unary_expression=] [=right_syntax/relational_expression.post.unary_expression=] [=syntax/or_or=] [=right_syntax/relational_expression=] ( [=syntax/or_or=] [=right_syntax/relational_expression=] )*
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>float_literal</dfn>:

 | [=right_syntax/decimal_float_literal=]

 | [=right_syntax/hex_float_literal=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>for_init</dfn>:

 | [=right_syntax/ident=] [=right_syntax/func_call_statement.post.ident=]

 | [=right_syntax/variable_statement=]

 | [=right_syntax/variable_updating_statement=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>for_update</dfn>:

 | [=right_syntax/ident=] [=right_syntax/func_call_statement.post.ident=]

 | [=right_syntax/variable_updating_statement=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>func_call_statement.post.ident</dfn>:

 | [=syntax/paren_left=] ( [=right_syntax/expression=] ( [=syntax/comma=] [=right_syntax/expression=] )* [=syntax/comma=] ? )? [=syntax/paren_right=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>global_decl</dfn>:

 | [=right_syntax/attribute=] * `'fn'` [=right_syntax/ident=] [=syntax/paren_left=] ( [=right_syntax/attribute=] * [=right_syntax/ident=] [=syntax/colon=] [=right_syntax/type_decl=] ( [=syntax/comma=] [=right_syntax/param=] )* [=syntax/comma=] ? )? [=syntax/paren_right=] ( [=syntax/arrow=] [=right_syntax/attribute=] * [=right_syntax/type_decl=] )? [=syntax/brace_left=] [=right_syntax/statement=] * [=syntax/brace_right=]

 | [=right_syntax/attribute=] * `'override'` [=right_syntax/optionally_typed_ident=] ( [=syntax/equal=] [=right_syntax/expression=] )? [=syntax/semicolon=]

 | [=right_syntax/attribute=] * `'var'` ( [=syntax/less_than=] [=right_syntax/address_space=] ( [=syntax/comma=] [=right_syntax/access_mode=] )? [=syntax/greater_than=] )? [=right_syntax/optionally_typed_ident=] ( [=syntax/equal=] [=right_syntax/expression=] )? [=syntax/semicolon=]

 | [=syntax/semicolon=]

 | `'static_assert'` [=right_syntax/expression=] [=syntax/semicolon=]

 | `'struct'` [=right_syntax/ident=] [=syntax/brace_left=] [=right_syntax/attribute=] * [=right_syntax/member_ident=] [=syntax/colon=] [=right_syntax/type_decl=] ( [=syntax/comma=] [=right_syntax/attribute=] * [=right_syntax/member_ident=] [=syntax/colon=] [=right_syntax/type_decl=] )* [=syntax/comma=] ? [=syntax/brace_right=]

 | `'type'` [=right_syntax/ident=] [=syntax/equal=] [=right_syntax/type_decl=] [=syntax/semicolon=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>hex_float_literal</dfn>:

 | `/0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/`

 | `/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/`

 | `/0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/`
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>ident</dfn>:[=syntax/ident_pattern_token=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>int_literal</dfn>:

 | `/0[iu]?/`

 | `/0[xX][0-9a-fA-F]+[iu]?/`

 | `/[1-9][0-9]*[iu]?/`
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>interpolation_sample_name</dfn>:

 | `'center'`

 | `'centroid'`

 | `'sample'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>interpolation_type_name</dfn>:

 | `'flat'`

 | `'linear'`

 | `'perspective'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>language</dfn>:

 | [=right_syntax/translation_unit=] `EndOfText`
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>lhs_expression</dfn>:

 | ( [=syntax/star=] | [=syntax/and=] ) * [=right_syntax/core_lhs_expression=] [=right_syntax/postfix_expression=] ?
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>mat_prefix</dfn>:

 | `'mat2x2'`

 | `'mat2x3'`

 | `'mat2x4'`

 | `'mat3x2'`

 | `'mat3x3'`

 | `'mat3x4'`

 | `'mat4x2'`

 | `'mat4x3'`

 | `'mat4x4'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>member_ident</dfn>:[=syntax/ident_pattern_token=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>multiplicative_expression</dfn>:

 | [=right_syntax/multiplicative_expression=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>multiplicative_operator</dfn>:

 | [=syntax/forward_slash=]

 | [=syntax/modulo=]

 | [=syntax/star=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>optionally_typed_ident</dfn>:

 | [=right_syntax/optionally_typed_ident=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>param</dfn>:

 | [=right_syntax/attribute=] * [=right_syntax/ident=] [=syntax/colon=] [=right_syntax/type_decl=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>postfix_expression</dfn>:

 | [=syntax/bracket_left=] [=right_syntax/expression=] [=syntax/bracket_right=] [=right_syntax/postfix_expression=] ?

 | [=syntax/period=] [=right_syntax/member_ident=] [=right_syntax/postfix_expression=] ?

 | [=syntax/period=] [=right_syntax/swizzle_name=] [=right_syntax/postfix_expression=] ?
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>primary_expression</dfn>:

 | [=right_syntax/callable=] [=syntax/paren_left=] ( [=right_syntax/expression=] ( [=syntax/comma=] [=right_syntax/expression=] )* [=syntax/comma=] ? )? [=syntax/paren_right=]

 | [=right_syntax/const_literal=]

 | [=right_syntax/ident=]

 | [=syntax/paren_left=] [=right_syntax/expression=] [=syntax/paren_right=]

 | `'bitcast'` [=syntax/less_than=] [=right_syntax/type_decl=] [=syntax/greater_than=] [=syntax/paren_left=] [=right_syntax/expression=] [=syntax/paren_right=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>relational_expression</dfn>:

 | [=right_syntax/unary_expression=] [=right_syntax/relational_expression.post.unary_expression=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>relational_expression.post.unary_expression</dfn>:

 | [=right_syntax/shift_expression.post.unary_expression=]

 | [=right_syntax/shift_expression.post.unary_expression=] [=syntax/equal_equal=] [=right_syntax/shift_expression=]

 | [=right_syntax/shift_expression.post.unary_expression=] [=syntax/greater_than=] [=right_syntax/shift_expression=]

 | [=right_syntax/shift_expression.post.unary_expression=] [=syntax/greater_than_equal=] [=right_syntax/shift_expression=]

 | [=right_syntax/shift_expression.post.unary_expression=] [=syntax/less_than=] [=right_syntax/shift_expression=]

 | [=right_syntax/shift_expression.post.unary_expression=] [=syntax/less_than_equal=] [=right_syntax/shift_expression=]

 | [=right_syntax/shift_expression.post.unary_expression=] [=syntax/not_equal=] [=right_syntax/shift_expression=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>sampled_texture_type</dfn>:

 | `'texture_1d'`

 | `'texture_2d'`

 | `'texture_2d_array'`

 | `'texture_3d'`

 | `'texture_cube'`

 | `'texture_cube_array'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>sampler_type</dfn>:

 | `'sampler'`

 | `'sampler_comparison'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>shift_expression</dfn>:

 | [=right_syntax/unary_expression=] [=right_syntax/shift_expression.post.unary_expression=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>shift_expression.post.unary_expression</dfn>:

 | ( [=right_syntax/multiplicative_operator=] [=right_syntax/unary_expression=] )* ( [=right_syntax/additive_operator=] [=right_syntax/multiplicative_expression=] )*

 | [=syntax/shift_left=] [=right_syntax/unary_expression=]

 | [=syntax/shift_right=] [=right_syntax/unary_expression=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>statement</dfn>:

 | [=right_syntax/compound_statement=]

 | [=right_syntax/ident=] [=syntax/paren_left=] ( [=right_syntax/expression=] ( [=syntax/comma=] [=right_syntax/expression=] )* [=syntax/comma=] ? )? [=syntax/paren_right=] [=syntax/semicolon=]

 | [=right_syntax/variable_statement=] [=syntax/semicolon=]

 | [=right_syntax/variable_updating_statement=] [=syntax/semicolon=]

 | [=syntax/break_statement=] [=syntax/semicolon=]

 | [=syntax/continue_statement=] [=syntax/semicolon=]

 | [=syntax/semicolon=]

 | `'discard'` [=syntax/semicolon=]

 | `'for'` [=syntax/paren_left=] [=right_syntax/for_init=] ? [=syntax/semicolon=] [=right_syntax/expression=] ? [=syntax/semicolon=] [=right_syntax/for_update=] ? [=syntax/paren_right=] [=right_syntax/compound_statement=]

 | `'if'` [=right_syntax/expression=] [=right_syntax/compound_statement=] ( `'else'` `'if'` [=right_syntax/expression=] [=right_syntax/compound_statement=] )* ( `'else'` [=right_syntax/compound_statement=] )?

 | `'loop'` [=syntax/brace_left=] [=right_syntax/statement=] * ( `'continuing'` [=syntax/brace_left=] [=right_syntax/statement=] * ( `'break'` `'if'` [=right_syntax/expression=] [=syntax/semicolon=] )? [=syntax/brace_right=] )? [=syntax/brace_right=]

 | `'return'` [=right_syntax/expression=] ? [=syntax/semicolon=]

 | `'static_assert'` [=right_syntax/expression=] [=syntax/semicolon=]

 | `'switch'` [=right_syntax/expression=] [=syntax/brace_left=] [=right_syntax/switch_body=] * [=syntax/brace_right=]

 | `'while'` [=right_syntax/expression=] [=right_syntax/compound_statement=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>storage_texture_type</dfn>:

 | `'texture_storage_1d'`

 | `'texture_storage_2d'`

 | `'texture_storage_2d_array'`

 | `'texture_storage_3d'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>switch_body</dfn>:

 | `'case'` [=right_syntax/case_selector=] ( [=syntax/comma=] [=right_syntax/case_selector=] )* [=syntax/comma=] ? [=syntax/colon=] ? [=right_syntax/compound_statement=]

 | `'default'` [=syntax/colon=] ? [=right_syntax/compound_statement=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>swizzle_name</dfn>:

 | `'/[rgba]/'`

 | `'/[rgba][rgba]/'`

 | `'/[rgba][rgba][rgba]/'`

 | `'/[rgba][rgba][rgba][rgba]/'`

 | `'/[xyzw]/'`

 | `'/[xyzw][xyzw]/'`

 | `'/[xyzw][xyzw][xyzw]/'`

 | `'/[xyzw][xyzw][xyzw][xyzw]/'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>texel_format</dfn>:

 | `'r32float'`

 | `'r32sint'`

 | `'r32uint'`

 | `'rg32float'`

 | `'rg32sint'`

 | `'rg32uint'`

 | `'rgba16float'`

 | `'rgba16sint'`

 | `'rgba16uint'`

 | `'rgba32float'`

 | `'rgba32sint'`

 | `'rgba32uint'`

 | `'rgba8sint'`

 | `'rgba8snorm'`

 | `'rgba8uint'`

 | `'rgba8unorm'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>texture_and_sampler_types</dfn>:

 | [=right_syntax/depth_texture_type=]

 | [=right_syntax/sampled_texture_type=] [=syntax/less_than=] [=right_syntax/type_decl=] [=syntax/greater_than=]

 | [=right_syntax/sampler_type=]

 | [=right_syntax/storage_texture_type=] [=syntax/less_than=] [=right_syntax/texel_format=] [=syntax/comma=] [=right_syntax/access_mode=] [=syntax/greater_than=]

 | [=syntax/multisampled_texture_type=] [=syntax/less_than=] [=right_syntax/type_decl=] [=syntax/greater_than=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>translation_unit</dfn>:

 | ( `'enable'` [=syntax/float16=] [=syntax/semicolon=] )* [=right_syntax/global_decl=] *
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>type_decl</dfn>:

 | [=right_syntax/ident=]

 | [=right_syntax/type_decl_without_ident=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>type_decl_without_ident</dfn>:

 | [=right_syntax/texture_and_sampler_types=]

 | [=syntax/float16=]

 | [=syntax/float32=]

 | [=syntax/int32=]

 | [=syntax/pointer=] [=syntax/less_than=] [=right_syntax/address_space=] [=syntax/comma=] [=right_syntax/type_decl=] ( [=syntax/comma=] [=right_syntax/access_mode=] )? [=syntax/greater_than=]

 | [=syntax/uint32=]

 | `'array'` [=syntax/less_than=] [=right_syntax/type_decl=] ( [=syntax/comma=] [=right_syntax/element_count_expression=] )? [=syntax/greater_than=]

 | `'bool'`
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>unary_expression</dfn>:

 | [=right_syntax/primary_expression=] [=right_syntax/postfix_expression=] ?

 | [=syntax/and=] [=right_syntax/unary_expression=]

 | [=syntax/bang=] [=right_syntax/unary_expression=]

 | [=syntax/minus=] [=right_syntax/unary_expression=]

 | [=syntax/star=] [=right_syntax/unary_expression=]

 | [=syntax/tilde=] [=right_syntax/unary_expression=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>variable_decl</dfn>:

 | `'var'` ( [=syntax/less_than=] [=right_syntax/address_space=] ( [=syntax/comma=] [=right_syntax/access_mode=] )? [=syntax/greater_than=] )? [=right_syntax/optionally_typed_ident=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>variable_statement</dfn>:

 | [=right_syntax/variable_decl=]

 | [=right_syntax/variable_decl=] [=syntax/equal=] [=right_syntax/expression=]

 | `'const'` [=right_syntax/optionally_typed_ident=] [=syntax/equal=] [=right_syntax/expression=]

 | `'let'` [=right_syntax/optionally_typed_ident=] [=syntax/equal=] [=right_syntax/expression=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>variable_updating_statement</dfn>:

 | ( [=syntax/star=] | [=syntax/and=] ) * [=right_syntax/core_lhs_expression=] [=right_syntax/postfix_expression=] ? ( [=syntax/equal=] | [=right_syntax/compound_assignment_operator=] ) [=right_syntax/expression=]

 | ( [=syntax/star=] | [=syntax/and=] ) * [=right_syntax/core_lhs_expression=] [=right_syntax/postfix_expression=] ? [=syntax/minus_minus=]

 | ( [=syntax/star=] | [=syntax/and=] ) * [=right_syntax/core_lhs_expression=] [=right_syntax/postfix_expression=] ? [=syntax/plus_plus=]
</div>

<div class='syntax' noexport='true'>
  <dfn for='right_syntax'>vec_prefix</dfn>:

 | `'vec2'`

 | `'vec3'`

 | `'vec4'`
</div>
